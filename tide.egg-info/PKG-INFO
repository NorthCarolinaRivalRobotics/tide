Metadata-Version: 2.4
Name: tide
Version: 0.1.0
Summary: A Zenoh-based robotics framework with opinionated namespacing
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: eclipse-zenoh>=1.3.4
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pyyaml>=6.0

# Tide

A lightweight, strongly-typed framework for robotics based on [Zenoh](https://zenoh.io/), with opinionated namespacing.

## Overview

Tide wraps Zenoh's key/value-based pub-sub-query model in a set of strongly-typed "robot nodes," each running an asyncio task that talks over a shared Zenoh session. 

The framework enforces an opinionated namespacing pattern:

```
/{robot_id}/{group}/{topic}
```

For example:
- `/frogbot/cmd/twist` - Command velocity for the "frogbot" robot
- `/frogbot/state/pose2d` - 2D pose state for the robot
- `/frogbot/sensor/lidar` - Lidar data from the robot

## Features

- **Opinionated namespacing**: Clear, consistent naming pattern for all messages
- **Zero-config networking**: Lean on Zenoh's peer discovery for automatic device connection
- **Strongly-typed messages**: Uses Pydantic models for validation and serialization
- **Pythonic + asyncio**: Single event loop per process keeps latency low
- **Callback-based**: Register callbacks for specific topics

## Installation

```bash
pip install tide
```

## Usage

### Defining a Node

```python
from tide.core.node import BaseNode
from tide.models import Twist2D, Pose2D, to_zenoh_value

class MyRobotNode(BaseNode):
    ROBOT_ID = "myrobot"  # Your robot's unique ID
    GROUP = "controller"  # Group for this node
    
    def __init__(self, *, config=None):
        super().__init__(config=config)
        
        # Subscribe to command velocity
        self.subscribe("cmd/twist", self._on_cmd_vel)
    
    def _on_cmd_vel(self, data):
        # Process command velocity message
        # ...
    
    async def step(self):
        # Called at the node's update rate
        # Publish robot state
        pose = Pose2D(x=1.0, y=2.0, theta=0.5)
        await self.put("state/pose2d", to_zenoh_value(pose))
```

### Launching Nodes

```python
import asyncio
from tide.core.utils import launch_from_config
import yaml

async def main():
    # Load configuration
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    # Launch nodes
    nodes = await launch_from_config(config)
    
    # Run until interrupted
    await asyncio.gather(*[n.tasks[0] for n in nodes])

if __name__ == "__main__":
    asyncio.run(main())
```

### Configuration File

```yaml
session:
  mode: peer  # Mesh network

nodes:
  - type: my_package.MyRobotNode
    params:
      robot_id: "robot1"
      
  - type: my_package.TeleopNode
    params:
      robot_id: "robot1"
```

## Common Message Types

- **Twist2D**: 2D velocity command (linear x, y and angular z)
- **Pose2D**: 2D pose (x, y, theta)
- **Pose3D**: 3D pose (position and orientation)
- **Acceleration3D**: 3D acceleration (linear and angular)
- **LaserScan**: 2D laser scan data

## License

MIT
